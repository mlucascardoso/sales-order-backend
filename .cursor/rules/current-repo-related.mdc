---
description: 
globs: 
alwaysApply: false
---
### üõ†Ô∏è Regras e Diretrizes do Projeto `sales-order-backend`

#### üìÅ Estrutura de Diret√≥rios e Arquivos

- **Configura√ß√µes TypeScript:**  
  `/home/mlucascardoso/cap-course/sales-order-backend/tsconfig.json`

- **Configura√ß√£o de Testes:**
  - **Unit√°rios (Vitest):** `/home/mlucascardoso/cap-course/sales-order-backend/vitest.config.ts`  
  - **End-to-End (Jest):** `/home/mlucascardoso/cap-course/sales-order-backend/jest.config.js`

- **Diret√≥rios principais:**
  - **C√≥digo-fonte (TypeScript):** `/srv`
  - **Banco de dados (CDS e migrations):** `/db`
  - **Testes (unit√°rios e e2e):** `/test`
  - **API utilit√°ria para testes e2e:**  
    `/test/e2e/config/api.ts`

#### üõÜ Depend√™ncias e Conven√ß√µes

- Todo o c√≥digo deve seguir as regras de lint configuradas com **ESLint** no reposit√≥rio.
- O projeto utili` como gerenciador de pacotes padr√£o.
- Para gera√ß√£o de arquivos Excel, utilize **[exceljs](https://github.com/exceljs/exceljs)**.
- Evite passar vari√°veis por **refer√™ncia de mem√≥ria** para prevenir efeitos colaterais relacionados √† mutabilidade.

- O projeto utiliza `yarn` como gerenciador de pacotes padr√£o.
- Para gera√ß√£o de arquivos Excel, utilize **[exceljs](https://github.com/exceljs/exceljs)**.
- Evite passar vari√°veis por **refer√™ncia de mem√≥ria** para prevenir efeitos colaterais relacionados √† mutabilidade.

#### ‚úÖ Boas Pr√°ticas e Qualidade

- **Toda nova rota deve vir acompanhada de testes unit√°rios e, se aplic√°vel, testes end-to-end.**
- **Evite l√≥gica de neg√≥cio nas rotas ou controllers. Prefira os servi√ßos.**

#### üßπ Padr√µes Arquiteturais

- **Routes (camada de entrada):**
  - Exp√µem entidades como servi√ßos REST.
  - Definem a√ß√µes e fun√ß√µes personalizadas.
  - Configuram middlewares de pr√©/p√≥s-processamento.
  - Implementam verifica√ß√µes b√°sicas de autoriza√ß√£o.

- **Controllers (camada de orquestra√ß√£o):**
  - Recebem e tratam requisi√ß√µes da camada de rotas.
  - Orquestram chamadas para servi√ßos.

- **Services (camada de neg√≥cio):**
  - Cont√™m valida√ß√µes complexas (ex: verifica√ß√£o de estoque).
  - Executam c√°lculos (ex: total de pedidos).
  - Coordenam m√∫ltiplos reposit√≥rios.
  - Implementam regras de neg√≥cio da aplica√ß√£o.

- **Models (camada de dom√≠nio):**
  - Representam estruturas de dados.
  - Executam valida√ß√µes espec√≠ficas por entidade.
  - Encapsulam comportamentos (ex: c√°lculo de descontos).
  - Realizam transforma√ß√µes de dados.
